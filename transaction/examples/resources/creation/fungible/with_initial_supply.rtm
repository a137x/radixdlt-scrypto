# This transaction manifest creates a new fungible resource with initial supply and with the default
# auth.

# ==================================================================================================
# WARNING: If you will be submitting this transaction through the Babylon wallet then you MUST
# remove the "lock_fee" instruction that you see below. Otherwise your transaction will fail. If all 
# that you are using is resim then you can safely ignore this warning.
# ==================================================================================================

# Locking 10 XRD in fees from the account component. 
CALL_METHOD 
    Address("${account_address}") 
    "lock_fee"
    Decimal("500");

# Creating a new resource with a divisibility of 18 and a name of `MyResource`. The resource has 
# default resource behavior where it can be withdrawn and deposited by anybody.
CREATE_FUNGIBLE_RESOURCE_WITH_INITIAL_SUPPLY
    # Owner role - This gets metadata permissions, and is the default for other permissions
    # Can set as Enum<OwnerRole::Fixed>(access_rule)  or Enum<OwnerRole::Updatable>(access_rule)
    Enum<OwnerRole::None>()
    true             # Whether the engine should track supply (avoid for massively parallelizable tokens)
    18u8             # Divisibility (between 0u8 and 18u8)
    Decimal("${initial_supply}") # Initial supply
    Tuple(
        Some(         # Mint Roles (if None: defaults to DenyAll, DenyAll)
            Tuple(
                Some(Enum<Rule::AllowAll>()),  # Minter (if None: defaults to Owner)
                Some(Enum<Rule::DenyAll>())    # Minter Updater (if None: defaults to Owner)
            )
        ),
        None,        # Burn Roles (if None: defaults to DenyAll, DenyAll)
        None,        # Freeze Roles (if None: defaults to DenyAll, DenyAll)
        None,        # Recall Roles (if None: defaults to DenyAll, DenyAll)
        None,        # Withdraw Roles (if None: defaults to AllowAll, DenyAll)
        None         # Deposit Roles (if None: defaults to AllowAll, DenyAll)
    )
    Tuple(                                                                   # Metadata initialization
        Map<String, Tuple>(                                                  # Initial metadata values
            "name" => Tuple(
                Some(Enum<Metadata::String>("MyResource")),    # Resource Name
                true                                                         # Locked
            )
        ),
        Map<String, Enum>(                                                   # Metadata roles
            "metadata_setter" => Some(Enum<Rule::AllowAll>()),         # Metadata setter role
            "metadata_setter_updater" => None,                               # Metadata setter updater role as None defaults to OWNER
            "metadata_locker" => Some(Enum<Rule::DenyAll>()),          # Metadata locker role
            "metadata_locker_updater" => None                                # Metadata locker updater role as None defaults to OWNER
        )
    )
    None;             # No Address Reservation

# Depositing the entirety of the initial supply of the newly created resource into our account 
# component.
CALL_METHOD
    Address("${account_address}") 
    "deposit_batch"
    Expression("ENTIRE_WORKTOP");