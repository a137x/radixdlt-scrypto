[package]
name = "fuzz-tests"
version = "1.0.1-dev"
publish = false
edition = "2021"

[package.metadata]
cargo-fuzz = true

[dependencies]
libfuzzer-sys = { version = "0.4", optional = true }
afl = { version = "0.14.1", optional = true }
ziggy = { version = "0.7.1", default-features = false, optional = true }
clap = { version = "4.1.7", optional = true }
rand = { version = "0.8.5", optional = true }
rand_chacha = { version = "0.3.1", optional = true }
log = { version = "0.4.17", optional = true }
once_cell = { version = "1.17.1"}
arbitrary = { version = "1.3.0", features = ["derive"] }
strum = { version = "0.24.1", default-features = false, features = ["derive"] }
sbor = { path = "../sbor", default-features = false, features = ["radix_engine_fuzzing"] }
native-sdk = { path = "../native-sdk", default-features = false }
radix-engine = { path = "../radix-engine", default-features = false, features = ["radix_engine_fuzzing", "moka"] }
radix-engine-common = { path = "../radix-engine-common", default-features = false, features = ["radix_engine_fuzzing"] }
radix-engine-interface = { path = "../radix-engine-interface", default-features = false, features = ["radix_engine_fuzzing"]}
radix-engine-store-interface = { path = "../radix-engine-store-interface", default-features = false }
radix-engine-stores = { path = "../radix-engine-stores", default-features = false }
transaction = { path = "../transaction", default-features = false, features = ["radix_engine_fuzzing"] }
utils = { path = "../utils", default-features = false, features = ["radix_engine_fuzzing"] }
scrypto-unit = { path = "../scrypto-unit", default-features = false }
serde = { version = "1.0.137", default-features = false, features = ["derive"] }
lazy_static = "1.4.0"
serde_json = "1.0.107"

[dev-dependencies]
bincode = { version = "1.3.3" }

[workspace]
members = ["."]

[profile.release]
# TODO: check if really this required
# Commented out out since due to following error, when building AFLplusplus
#  - in debug mode (see GNUmakefile:142 - Werror is set)
#  - with some modern gcc toolchain: clang 16.0, llvm-gcc 14
# src/afl-fuzz-redqueen.c:1603:20: warning: variable 'cons_0' set but not used [-Wunused-but-set-variable]
#debug = 1

[[bin]]
name = "transaction"
path = "src/bin/transaction.rs"
#test = false
doc = false

[[bin]]
name = "wasm_instrument"
path = "src/bin/wasm_instrument.rs"
#test = false
doc = false

[[bin]]
name = "role_assignment"
path = "src/bin/attached_modules/role_assignment.rs"
#test = false
doc = false

[[bin]]
name = "royalty_state"
path = "src/bin/attached_modules/royalty_state.rs"
#test = false
doc = false

[features]
# You should enable either `std` or `alloc`
default = ["std", "fuzzer"]
post_run_db_check = ["scrypto-unit/post_run_db_check"]
std = ["sbor/std", "transaction/std", "radix-engine/std", "radix-engine-interface/std", "radix-engine-store-interface/std", "utils/std", "scrypto-unit/std", "native-sdk/std"]
alloc = ["sbor/alloc", "transaction/alloc", "radix-engine/alloc", "radix-engine-interface/alloc", "radix-engine-store-interface/alloc", "utils/alloc", "scrypto-unit/alloc", "native-sdk/alloc"]
wasmer = ["radix-engine/wasmer"]
cpu_ram_metrics = ["radix-engine/cpu_ram_metrics"]
flamegraph = []

simple-fuzzer = ["clap", "rand", "rand_chacha", "log"]
dump_manifest_to_file = []
# If disabled then try to fuzz smartly:
# - build transaction manifest by randomly picking instructions
# - map fuzz data into Radix Engine data structures
# - mix random objects with preallocated and native objects
# If enabled then try to decode transaction manifest from fuzz data
dummy_fuzzing = []

verbose = []

#fuzzer = [ "libfuzzer-sys" ]
#fuzzer = [ "afl" ]
#fuzzer = ["simple-fuzzer"]
fuzzer = ["ziggy"]

rocksdb = []
