(function() {var type_impls = {
"radix_engine":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1483\">source</a></span><a href=\"#impl-PartialOrd-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.PartialOrd.html\" title=\"trait radix_engine::types::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1485\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"radix_engine/types/enum.Option.html\" title=\"enum radix_engine::types::Option\">Option</a>&lt;<a class=\"enum\" href=\"radix_engine/types/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum radix_engine::types::radix_engine_common::prelude::rust::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"radix_engine/types/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"radix_engine/types/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"radix_engine/types/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"radix_engine/types/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"radix_engine/types/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<section id=\"impl-ConstParamTy-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#1083\">source</a><a href=\"#impl-ConstParamTy-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/radix_engine_common/prelude/rust/marker/trait.ConstParamTy.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::rust::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","ConstParamTy","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#17\">source</a></span><a href=\"#impl-FromIterator%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.FromIterator.html\" title=\"trait radix_engine::types::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"docblock\"><p>Collapses all unit items from an iterator into one.</p>\n<p>This is more useful when combined with higher-level abstractions, like\ncollecting to a <code>Result&lt;(), E&gt;</code> where you only care about errors:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span>data = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;()&gt; = data.iter()\n    .map(|x| <span class=\"macro\">writeln!</span>(stdout(), <span class=\"string\">\"{x}\"</span>))\n    .collect();\n<span class=\"macro\">assert!</span>(res.is_ok());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#18\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"radix_engine/types/trait.IntoIterator.html\" title=\"trait radix_engine::types::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"radix_engine/types/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<()>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a></span><a href=\"#impl-Hash-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hash.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::rust::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, _state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::rust::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::rust::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"radix_engine/types/trait.Sized.html\" title=\"trait radix_engine::types::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"radix_engine/types/radix_engine_common/prelude/rust/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2527\">source</a></span><a href=\"#impl-Debug-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.Debug.html\" title=\"trait radix_engine::types::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2529\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"radix_engine/types/radix_engine_common/prelude/fmt/struct.Formatter.html\" title=\"struct radix_engine::types::radix_engine_common::prelude::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"radix_engine/types/enum.Result.html\" title=\"enum radix_engine::types::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"radix_engine/types/radix_engine_common/prelude/fmt/struct.Error.html\" title=\"struct radix_engine::types::radix_engine_common::prelude::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"radix_engine/types/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<section id=\"impl-StructuralPartialEq-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/radix_engine_common/prelude/rust/marker/trait.StructuralPartialEq.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::rust::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","StructuralPartialEq","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<section id=\"impl-Eq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1455\">source</a></span><a href=\"#impl-Eq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.Eq.html\" title=\"trait radix_engine::types::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","Eq","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1533\">source</a></span><a href=\"#impl-Ord-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.Ord.html\" title=\"trait radix_engine::types::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"radix_engine/types/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum radix_engine::types::radix_engine_common::prelude::rust::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"radix_engine/types/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum radix_engine::types::radix_engine_common::prelude::rust::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"radix_engine/types/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"radix_engine/types/trait.Sized.html\" title=\"trait radix_engine::types::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"radix_engine/types/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"radix_engine/types/trait.Sized.html\" title=\"trait radix_engine::types::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"radix_engine/types/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"radix_engine/types/trait.Sized.html\" title=\"trait radix_engine::types::Sized\">Sized</a> + <a class=\"trait\" href=\"radix_engine/types/trait.PartialOrd.html\" title=\"trait radix_engine::types::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"radix_engine/types/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1433\">source</a></span><a href=\"#impl-PartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.PartialEq.html\" title=\"trait radix_engine::types::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1435\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1439\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#390\">source</a></span><a href=\"#impl-Extend%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.Extend.html\" title=\"trait radix_engine::types::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#391\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"radix_engine/types/trait.IntoIterator.html\" title=\"trait radix_engine::types::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"radix_engine/types/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#394\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _item: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"radix_engine/types/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<()>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a></span><a href=\"#impl-Default-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.Default.html\" title=\"trait radix_engine::types::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Default.html#tymethod.default\" class=\"fn\">default</a>()</h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>()</code></p>\n</div></details></div></details>","Default","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonFungibleData-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#8\">source</a><a href=\"#impl-NonFungibleData-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/types/trait.NonFungibleData.html\" title=\"trait radix_engine::types::NonFungibleData\">NonFungibleData</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.MUTABLE_FIELDS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#9\">source</a><a href=\"#associatedconstant.MUTABLE_FIELDS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"radix_engine/types/trait.NonFungibleData.html#associatedconstant.MUTABLE_FIELDS\" class=\"constant\">MUTABLE_FIELDS</a>: &amp;'static [&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.str.html\">str</a>] = _</h4></section></div></details>","NonFungibleData","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3CX,+D%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#impl-Decode%3CX,+D%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, D&gt; <a class=\"trait\" href=\"radix_engine/types/trait.Decode.html\" title=\"trait radix_engine::types::Decode\">Decode</a>&lt;X, D&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine/types/trait.CustomValueKind.html\" title=\"trait radix_engine::types::CustomValueKind\">CustomValueKind</a>,\n    D: <a class=\"trait\" href=\"radix_engine/types/trait.Decoder.html\" title=\"trait radix_engine::types::Decoder\">Decoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_body_with_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#method.decode_body_with_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Decode.html#tymethod.decode_body_with_value_kind\" class=\"fn\">decode_body_with_value_kind</a>(\n    decoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut D</a>,\n    value_kind: <a class=\"enum\" href=\"radix_engine/types/enum.ValueKind.html\" title=\"enum radix_engine::types::ValueKind\">ValueKind</a>&lt;X&gt;\n) -&gt; <a class=\"enum\" href=\"radix_engine/types/enum.Result.html\" title=\"enum radix_engine::types::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"radix_engine/types/enum.DecodeError.html\" title=\"enum radix_engine::types::DecodeError\">DecodeError</a>&gt;</h4></section></summary><div class='docblock'>Decodes the type from the decoder, which should match a preloaded value kind. <a href=\"radix_engine/types/trait.Decode.html#tymethod.decode_body_with_value_kind\">Read more</a></div></details></div></details>","Decode<X, D>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Describe%3CC%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#impl-Describe%3CC%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C&gt; <a class=\"trait\" href=\"radix_engine/types/trait.Describe.html\" title=\"trait radix_engine::types::Describe\">Describe</a>&lt;C&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    C: <a class=\"trait\" href=\"radix_engine/types/trait.CustomTypeKind.html\" title=\"trait radix_engine::types::CustomTypeKind\">CustomTypeKind</a>&lt;<a class=\"enum\" href=\"radix_engine/types/enum.RustTypeId.html\" title=\"enum radix_engine::types::RustTypeId\">RustTypeId</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TYPE_ID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#associatedconstant.TYPE_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"radix_engine/types/trait.Describe.html#associatedconstant.TYPE_ID\" class=\"constant\">TYPE_ID</a>: <a class=\"enum\" href=\"radix_engine/types/enum.RustTypeId.html\" title=\"enum radix_engine::types::RustTypeId\">RustTypeId</a> = _</h4></section></summary><div class='docblock'>The <code>TYPE_ID</code> should give a unique identifier for its SBOR schema type.\nAn SBOR schema type capture details about the SBOR payload, how it should be interpreted, validated and displayed. <a href=\"radix_engine/types/trait.Describe.html#associatedconstant.TYPE_ID\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_data\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#method.type_data\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Describe.html#tymethod.type_data\" class=\"fn\">type_data</a>() -&gt; <a class=\"struct\" href=\"radix_engine/types/struct.TypeData.html\" title=\"struct radix_engine::types::TypeData\">TypeData</a>&lt;C, <a class=\"enum\" href=\"radix_engine/types/enum.RustTypeId.html\" title=\"enum radix_engine::types::RustTypeId\">RustTypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the local schema for the given type. <a href=\"radix_engine/types/trait.Describe.html#tymethod.type_data\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_all_dependencies\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/schema/describe.rs.html#59\">source</a><a href=\"#method.add_all_dependencies\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Describe.html#method.add_all_dependencies\" class=\"fn\">add_all_dependencies</a>(aggregator: &amp;mut <a class=\"struct\" href=\"radix_engine/types/struct.TypeAggregator.html\" title=\"struct radix_engine::types::TypeAggregator\">TypeAggregator</a>&lt;C&gt;)</h4></section></summary><div class='docblock'>For each type referenced in <code>get_local_type_data</code>, we need to ensure that the type and all of its own references\nget added to the aggregator. <a href=\"radix_engine/types/trait.Describe.html#method.add_all_dependencies\">Read more</a></div></details></div></details>","Describe<C>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3CX,+E%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#impl-Encode%3CX,+E%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, E&gt; <a class=\"trait\" href=\"radix_engine/types/trait.Encode.html\" title=\"trait radix_engine::types::Encode\">Encode</a>&lt;X, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine/types/trait.CustomValueKind.html\" title=\"trait radix_engine::types::CustomValueKind\">CustomValueKind</a>,\n    E: <a class=\"trait\" href=\"radix_engine/types/trait.Encoder.html\" title=\"trait radix_engine::types::Encoder\">Encoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Encode.html#tymethod.encode_value_kind\" class=\"fn\">encode_value_kind</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"radix_engine/types/enum.Result.html\" title=\"enum radix_engine::types::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"radix_engine/types/enum.EncodeError.html\" title=\"enum radix_engine::types::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR value’s kind to the encoder</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_body\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_body\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Encode.html#tymethod.encode_body\" class=\"fn\">encode_body</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"radix_engine/types/enum.Result.html\" title=\"enum radix_engine::types::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"radix_engine/types/enum.EncodeError.html\" title=\"enum radix_engine::types::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR body of the type to the encoder. <a href=\"radix_engine/types/trait.Encode.html#tymethod.encode_body\">Read more</a></div></details></div></details>","Encode<X, E>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/basic.rs.html#278\">source</a><a href=\"#impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"radix_engine/types/radix_engine_common/prelude/representations/trait.CustomDisplayContext.html\" title=\"trait radix_engine::types::radix_engine_common::prelude::representations::CustomDisplayContext\">CustomDisplayContext</a>&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.CustomExtension\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CustomExtension\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radix_engine/types/radix_engine_common/prelude/representations/trait.CustomDisplayContext.html#associatedtype.CustomExtension\" class=\"associatedtype\">CustomExtension</a> = <a class=\"enum\" href=\"radix_engine/types/enum.NoCustomExtension.html\" title=\"enum radix_engine::types::NoCustomExtension\">NoCustomExtension</a></h4></section></div></details>","CustomDisplayContext<'a>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SborTuple%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-SborTuple%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"radix_engine/types/trait.SborTuple.html\" title=\"trait radix_engine::types::SborTuple\">SborTuple</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine/types/trait.CustomValueKind.html\" title=\"trait radix_engine::types::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.get_length\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.get_length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.SborTuple.html#tymethod.get_length\" class=\"fn\">get_length</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a></h4></section></div></details>","SborTuple<X>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Categorize%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-Categorize%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"radix_engine/types/trait.Categorize.html\" title=\"trait radix_engine::types::Categorize\">Categorize</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine/types/trait.CustomValueKind.html\" title=\"trait radix_engine::types::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/types/trait.Categorize.html#tymethod.value_kind\" class=\"fn\">value_kind</a>() -&gt; <a class=\"enum\" href=\"radix_engine/types/enum.ValueKind.html\" title=\"enum radix_engine::types::ValueKind\">ValueKind</a>&lt;X&gt;</h4></section></div></details>","Categorize<X>","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApplicationEventChecker-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine/system/checkers/system_event_checker.rs.html#20-22\">source</a><a href=\"#impl-ApplicationEventChecker-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/system/checkers/system_event_checker/trait.ApplicationEventChecker.html\" title=\"trait radix_engine::system::checkers::system_event_checker::ApplicationEventChecker\">ApplicationEventChecker</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ApplicationEventCheckerResults\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ApplicationEventCheckerResults\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radix_engine/system/checkers/system_event_checker/trait.ApplicationEventChecker.html#associatedtype.ApplicationEventCheckerResults\" class=\"associatedtype\">ApplicationEventCheckerResults</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h4></section><section id=\"method.on_event\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/system/checkers/system_event_checker.rs.html#12-13\">source</a><a href=\"#method.on_event\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/system/checkers/system_event_checker/trait.ApplicationEventChecker.html#method.on_event\" class=\"fn\">on_event</a>(\n    &amp;mut self,\n    _info: <a class=\"struct\" href=\"radix_engine/types/struct.BlueprintInfo.html\" title=\"struct radix_engine::types::BlueprintInfo\">BlueprintInfo</a>,\n    _event_id: <a class=\"struct\" href=\"radix_engine/types/struct.EventTypeIdentifier.html\" title=\"struct radix_engine::types::EventTypeIdentifier\">EventTypeIdentifier</a>,\n    _event: &amp;<a class=\"struct\" href=\"radix_engine/types/node_modules/metadata/struct.Vec.html\" title=\"struct radix_engine::types::node_modules::metadata::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.u8.html\">u8</a>&gt;\n)</h4></section><section id=\"method.on_finish\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/system/checkers/system_event_checker.rs.html#15-17\">source</a><a href=\"#method.on_finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/system/checkers/system_event_checker/trait.ApplicationEventChecker.html#method.on_finish\" class=\"fn\">on_finish</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"radix_engine/system/checkers/system_event_checker/trait.ApplicationEventChecker.html#associatedtype.ApplicationEventCheckerResults\" title=\"type radix_engine::system::checkers::system_event_checker::ApplicationEventChecker::ApplicationEventCheckerResults\">ApplicationEventCheckerResults</a></h4></section></div></details>","ApplicationEventChecker","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ApplicationChecker-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine/system/checkers/system_db_checker.rs.html#167-169\">source</a><a href=\"#impl-ApplicationChecker-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/system/checkers/system_db_checker/trait.ApplicationChecker.html\" title=\"trait radix_engine::system::checkers::system_db_checker::ApplicationChecker\">ApplicationChecker</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.ApplicationCheckerResults\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ApplicationCheckerResults\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radix_engine/system/checkers/system_db_checker/trait.ApplicationChecker.html#associatedtype.ApplicationCheckerResults\" class=\"associatedtype\">ApplicationCheckerResults</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h4></section><section id=\"method.on_field\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/system/checkers/system_db_checker.rs.html#141-149\">source</a><a href=\"#method.on_field\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/system/checkers/system_db_checker/trait.ApplicationChecker.html#method.on_field\" class=\"fn\">on_field</a>(\n    &amp;mut self,\n    _info: <a class=\"struct\" href=\"radix_engine/types/struct.BlueprintInfo.html\" title=\"struct radix_engine::types::BlueprintInfo\">BlueprintInfo</a>,\n    _node_id: <a class=\"struct\" href=\"radix_engine/types/struct.NodeId.html\" title=\"struct radix_engine::types::NodeId\">NodeId</a>,\n    _module_id: <a class=\"enum\" href=\"radix_engine/types/enum.ModuleId.html\" title=\"enum radix_engine::types::ModuleId\">ModuleId</a>,\n    _field_index: <a class=\"type\" href=\"radix_engine/types/type.FieldIndex.html\" title=\"type radix_engine::types::FieldIndex\">FieldIndex</a>,\n    _value: &amp;<a class=\"struct\" href=\"radix_engine/types/node_modules/metadata/struct.Vec.html\" title=\"struct radix_engine::types::node_modules::metadata::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.u8.html\">u8</a>&gt;\n)</h4></section><section id=\"method.on_collection_entry\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/system/checkers/system_db_checker.rs.html#151-160\">source</a><a href=\"#method.on_collection_entry\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/system/checkers/system_db_checker/trait.ApplicationChecker.html#method.on_collection_entry\" class=\"fn\">on_collection_entry</a>(\n    &amp;mut self,\n    _info: <a class=\"struct\" href=\"radix_engine/types/struct.BlueprintInfo.html\" title=\"struct radix_engine::types::BlueprintInfo\">BlueprintInfo</a>,\n    _node_id: <a class=\"struct\" href=\"radix_engine/types/struct.NodeId.html\" title=\"struct radix_engine::types::NodeId\">NodeId</a>,\n    _module_id: <a class=\"enum\" href=\"radix_engine/types/enum.ModuleId.html\" title=\"enum radix_engine::types::ModuleId\">ModuleId</a>,\n    _collection_index: <a class=\"type\" href=\"radix_engine/types/type.CollectionIndex.html\" title=\"type radix_engine::types::CollectionIndex\">CollectionIndex</a>,\n    _key: &amp;<a class=\"struct\" href=\"radix_engine/types/node_modules/metadata/struct.Vec.html\" title=\"struct radix_engine::types::node_modules::metadata::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.u8.html\">u8</a>&gt;,\n    _value: &amp;<a class=\"struct\" href=\"radix_engine/types/node_modules/metadata/struct.Vec.html\" title=\"struct radix_engine::types::node_modules::metadata::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.u8.html\">u8</a>&gt;\n)</h4></section><section id=\"method.on_finish\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/system/checkers/system_db_checker.rs.html#162-164\">source</a><a href=\"#method.on_finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/system/checkers/system_db_checker/trait.ApplicationChecker.html#method.on_finish\" class=\"fn\">on_finish</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"radix_engine/system/checkers/system_db_checker/trait.ApplicationChecker.html#associatedtype.ApplicationCheckerResults\" title=\"type radix_engine::system::checkers::system_db_checker::ApplicationChecker::ApplicationCheckerResults\">ApplicationCheckerResults</a></h4></section></div></details>","ApplicationChecker","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VersionedNonFungibleVaultNonFungibleVersion-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#impl-VersionedNonFungibleVaultNonFungibleVersion-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine/blueprints/resource/non_fungible/non_fungible_vault/non_fungible_vault_models/trait.VersionedNonFungibleVaultNonFungibleVersion.html\" title=\"trait radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::VersionedNonFungibleVaultNonFungibleVersion\">VersionedNonFungibleVaultNonFungibleVersion</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Versioned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Versioned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radix_engine/blueprints/resource/non_fungible/non_fungible_vault/non_fungible_vault_models/trait.VersionedNonFungibleVaultNonFungibleVersion.html#associatedtype.Versioned\" class=\"associatedtype\">Versioned</a> = <a class=\"enum\" href=\"radix_engine/blueprints/resource/non_fungible/non_fungible_vault/non_fungible_vault_models/enum.VersionedNonFungibleVaultNonFungible.html\" title=\"enum radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::VersionedNonFungibleVaultNonFungible\">VersionedNonFungibleVaultNonFungible</a></h4></section><section id=\"method.into_versioned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#method.into_versioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine/blueprints/resource/non_fungible/non_fungible_vault/non_fungible_vault_models/trait.VersionedNonFungibleVaultNonFungibleVersion.html#tymethod.into_versioned\" class=\"fn\">into_versioned</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"radix_engine/blueprints/resource/non_fungible/non_fungible_vault/non_fungible_vault_models/trait.VersionedNonFungibleVaultNonFungibleVersion.html#associatedtype.Versioned\" title=\"type radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::VersionedNonFungibleVaultNonFungibleVersion::Versioned\">Versioned</a></h4></section></div></details>","VersionedNonFungibleVaultNonFungibleVersion","radix_engine::blueprints::account::blueprint::AccountAuthorizedDepositorV1","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::non_fungible_vault_models::NonFungibleVaultNonFungible","radix_engine::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultNonFungibleV1","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine::types::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine::types::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","radix_engine::types::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","radix_engine::types::blueprints::account::AccountLockFeeOutput","radix_engine::types::blueprints::account::AccountLockContingentFeeOutput","radix_engine::types::blueprints::account::AccountDepositOutput","radix_engine::types::blueprints::account::AccountDepositBatchOutput","radix_engine::types::blueprints::account::AccountSetDefaultDepositRuleOutput","radix_engine::types::blueprints::account::AccountSetResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountRemoveResourcePreferenceOutput","radix_engine::types::blueprints::account::AccountTryDepositOrAbortOutput","radix_engine::types::blueprints::account::AccountTryDepositBatchOrAbortOutput","radix_engine::types::blueprints::account::AccountBurnOutput","radix_engine::types::blueprints::account::AccountBurnNonFungiblesOutput","radix_engine::types::blueprints::account::AccountAddAuthorizedDepositorOutput","radix_engine::types::blueprints::account::AccountRemoveAuthorizedDepositorOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerCreateOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerStartOutput","radix_engine::types::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","radix_engine::types::blueprints::consensus_manager::ValidatorRegisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUnregisterOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateKeyOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateFeeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine::types::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyEmissionOutput","radix_engine::types::blueprints::consensus_manager::ValidatorApplyRewardOutput","radix_engine::types::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","radix_engine::types::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine::types::blueprints::pool::MultiResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::OneResourcePoolProtectedDepositOutput","radix_engine::types::blueprints::pool::TwoResourcePoolProtectedDepositOutput","radix_engine::types::AuthZonePushOutput","radix_engine::types::AuthZoneDropProofsOutput","radix_engine::types::AuthZoneDropSignatureProofsOutput","radix_engine::types::AuthZoneDropRegularProofsOutput","radix_engine::types::AuthZoneAssertAccessRuleOutput","radix_engine::types::BucketPutOutput","radix_engine::types::FungibleBucketLockAmountOutput","radix_engine::types::FungibleBucketUnlockAmountOutput","radix_engine::types::FungibleVaultLockFeeOutput","radix_engine::types::FungibleVaultLockFungibleAmountOutput","radix_engine::types::FungibleVaultUnlockFungibleAmountOutput","radix_engine::types::NonFungibleBucketLockNonFungiblesOutput","radix_engine::types::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine::types::NonFungibleResourceManagerUpdateDataOutput","radix_engine::types::NonFungibleVaultLockNonFungiblesOutput","radix_engine::types::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine::types::NonFungibleVaultBurnNonFungiblesOutput","radix_engine::types::ProofDropOutput","radix_engine::types::ResourceManagerBurnOutput","radix_engine::types::ResourceManagerPackageBurnOutput","radix_engine::types::ResourceManagerDropEmptyBucketOutput","radix_engine::types::VaultPutOutput","radix_engine::types::VaultFreezeOutput","radix_engine::types::VaultUnfreezeOutput","radix_engine::types::VaultBurnOutput","radix_engine::types::WorktopDropOutput","radix_engine::types::WorktopPutOutput","radix_engine::types::WorktopAssertContainsOutput","radix_engine::types::WorktopAssertContainsAmountOutput","radix_engine::types::WorktopAssertContainsNonFungiblesOutput","radix_engine::types::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine::types::node_modules::metadata::MetadataSetOutput","radix_engine::types::node_modules::metadata::MetadataLockOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOutput","radix_engine::types::node_modules::auth::RoleAssignmentSetOwnerOutput","radix_engine::types::node_modules::auth::RoleAssingmentLockOwnerOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltySetOutput","radix_engine::types::node_modules::royalty::ComponentRoyaltyLockOutput"]],
"radix_engine_interface":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1483\">source</a></span><a href=\"#impl-PartialOrd-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html\" title=\"trait radix_engine_interface::prelude::prelude::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1485\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.Option.html\" title=\"enum radix_engine_interface::prelude::prelude::Option\">Option</a>&lt;<a class=\"enum\" href=\"radix_engine_interface/prelude/rust/cmp/enum.Ordering.html\" title=\"enum radix_engine_interface::prelude::rust::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<section id=\"impl-ConstParamTy-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#1083\">source</a><a href=\"#impl-ConstParamTy-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/rust/marker/trait.ConstParamTy.html\" title=\"trait radix_engine_interface::prelude::rust::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","ConstParamTy","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#17\">source</a></span><a href=\"#impl-FromIterator%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.FromIterator.html\" title=\"trait radix_engine_interface::prelude::prelude::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"docblock\"><p>Collapses all unit items from an iterator into one.</p>\n<p>This is more useful when combined with higher-level abstractions, like\ncollecting to a <code>Result&lt;(), E&gt;</code> where you only care about errors:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span>data = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;()&gt; = data.iter()\n    .map(|x| <span class=\"macro\">writeln!</span>(stdout(), <span class=\"string\">\"{x}\"</span>))\n    .collect();\n<span class=\"macro\">assert!</span>(res.is_ok());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#18\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.IntoIterator.html\" title=\"trait radix_engine_interface::prelude::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"radix_engine_interface/prelude/prelude/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<()>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a></span><a href=\"#impl-Hash-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/rust/hash/trait.Hash.html\" title=\"trait radix_engine_interface::prelude::rust::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/rust/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, _state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"radix_engine_interface/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine_interface::prelude::rust::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"radix_engine_interface/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine_interface::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"radix_engine_interface/prelude/rust/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/rust/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"radix_engine_interface/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine_interface::prelude::rust::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Sized.html\" title=\"trait radix_engine_interface::prelude::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"radix_engine_interface/prelude/rust/hash/trait.Hasher.html\" title=\"trait radix_engine_interface::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"radix_engine_interface/prelude/rust/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2527\">source</a></span><a href=\"#impl-Debug-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Debug.html\" title=\"trait radix_engine_interface::prelude::prelude::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2529\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"radix_engine_interface/prelude/fmt/struct.Formatter.html\" title=\"struct radix_engine_interface::prelude::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.Result.html\" title=\"enum radix_engine_interface::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"radix_engine_interface/prelude/fmt/struct.Error.html\" title=\"struct radix_engine_interface::prelude::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"radix_engine_interface/prelude/prelude/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<section id=\"impl-StructuralPartialEq-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/rust/marker/trait.StructuralPartialEq.html\" title=\"trait radix_engine_interface::prelude::rust::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","StructuralPartialEq","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<section id=\"impl-Eq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1455\">source</a></span><a href=\"#impl-Eq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Eq.html\" title=\"trait radix_engine_interface::prelude::prelude::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","Eq","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1533\">source</a></span><a href=\"#impl-Ord-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Ord.html\" title=\"trait radix_engine_interface::prelude::prelude::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"radix_engine_interface/prelude/rust/cmp/enum.Ordering.html\" title=\"enum radix_engine_interface::prelude::rust::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"radix_engine_interface/prelude/rust/cmp/enum.Ordering.html\" title=\"enum radix_engine_interface::prelude::rust::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Sized.html\" title=\"trait radix_engine_interface::prelude::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Sized.html\" title=\"trait radix_engine_interface::prelude::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Sized.html\" title=\"trait radix_engine_interface::prelude::prelude::Sized\">Sized</a> + <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.PartialOrd.html\" title=\"trait radix_engine_interface::prelude::prelude::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"radix_engine_interface/prelude/prelude/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1433\">source</a></span><a href=\"#impl-PartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.PartialEq.html\" title=\"trait radix_engine_interface::prelude::prelude::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1435\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1439\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#390\">source</a></span><a href=\"#impl-Extend%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Extend.html\" title=\"trait radix_engine_interface::prelude::prelude::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#391\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.IntoIterator.html\" title=\"trait radix_engine_interface::prelude::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"radix_engine_interface/prelude/prelude/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#394\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _item: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"radix_engine_interface/prelude/prelude/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<()>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a></span><a href=\"#impl-Default-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.Default.html\" title=\"trait radix_engine_interface::prelude::prelude::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.Default.html#tymethod.default\" class=\"fn\">default</a>()</h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>()</code></p>\n</div></details></div></details>","Default","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3CX,+D%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#impl-Decode%3CX,+D%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, D&gt; <a class=\"trait\" href=\"radix_engine_interface/trait.Decode.html\" title=\"trait radix_engine_interface::Decode\">Decode</a>&lt;X, D&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.CustomValueKind.html\" title=\"trait radix_engine_interface::prelude::prelude::CustomValueKind\">CustomValueKind</a>,\n    D: <a class=\"trait\" href=\"radix_engine_interface/prelude/trait.Decoder.html\" title=\"trait radix_engine_interface::prelude::Decoder\">Decoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_body_with_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#method.decode_body_with_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/trait.Decode.html#tymethod.decode_body_with_value_kind\" class=\"fn\">decode_body_with_value_kind</a>(\n    decoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut D</a>,\n    value_kind: <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.ValueKind.html\" title=\"enum radix_engine_interface::prelude::prelude::ValueKind\">ValueKind</a>&lt;X&gt;\n) -&gt; <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.Result.html\" title=\"enum radix_engine_interface::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.DecodeError.html\" title=\"enum radix_engine_interface::prelude::prelude::DecodeError\">DecodeError</a>&gt;</h4></section></summary><div class='docblock'>Decodes the type from the decoder, which should match a preloaded value kind. <a href=\"radix_engine_interface/trait.Decode.html#tymethod.decode_body_with_value_kind\">Read more</a></div></details></div></details>","Decode<X, D>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Describe%3CC%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#impl-Describe%3CC%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C&gt; <a class=\"trait\" href=\"radix_engine_interface/prelude/trait.Describe.html\" title=\"trait radix_engine_interface::prelude::Describe\">Describe</a>&lt;C&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    C: <a class=\"trait\" href=\"radix_engine_interface/prelude/trait.CustomTypeKind.html\" title=\"trait radix_engine_interface::prelude::CustomTypeKind\">CustomTypeKind</a>&lt;<a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.RustTypeId.html\" title=\"enum radix_engine_interface::prelude::prelude::RustTypeId\">RustTypeId</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TYPE_ID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#associatedconstant.TYPE_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"radix_engine_interface/prelude/trait.Describe.html#associatedconstant.TYPE_ID\" class=\"constant\">TYPE_ID</a>: <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.RustTypeId.html\" title=\"enum radix_engine_interface::prelude::prelude::RustTypeId\">RustTypeId</a> = _</h4></section></summary><div class='docblock'>The <code>TYPE_ID</code> should give a unique identifier for its SBOR schema type.\nAn SBOR schema type capture details about the SBOR payload, how it should be interpreted, validated and displayed. <a href=\"radix_engine_interface/prelude/trait.Describe.html#associatedconstant.TYPE_ID\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_data\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#method.type_data\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/trait.Describe.html#tymethod.type_data\" class=\"fn\">type_data</a>() -&gt; <a class=\"struct\" href=\"radix_engine_interface/prelude/prelude/struct.TypeData.html\" title=\"struct radix_engine_interface::prelude::prelude::TypeData\">TypeData</a>&lt;C, <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.RustTypeId.html\" title=\"enum radix_engine_interface::prelude::prelude::RustTypeId\">RustTypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the local schema for the given type. <a href=\"radix_engine_interface/prelude/trait.Describe.html#tymethod.type_data\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_all_dependencies\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/schema/describe.rs.html#59\">source</a><a href=\"#method.add_all_dependencies\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/trait.Describe.html#method.add_all_dependencies\" class=\"fn\">add_all_dependencies</a>(aggregator: &amp;mut <a class=\"struct\" href=\"radix_engine_interface/prelude/prelude/struct.TypeAggregator.html\" title=\"struct radix_engine_interface::prelude::prelude::TypeAggregator\">TypeAggregator</a>&lt;C&gt;)</h4></section></summary><div class='docblock'>For each type referenced in <code>get_local_type_data</code>, we need to ensure that the type and all of its own references\nget added to the aggregator. <a href=\"radix_engine_interface/prelude/trait.Describe.html#method.add_all_dependencies\">Read more</a></div></details></div></details>","Describe<C>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3CX,+E%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#impl-Encode%3CX,+E%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, E&gt; <a class=\"trait\" href=\"radix_engine_interface/trait.Encode.html\" title=\"trait radix_engine_interface::Encode\">Encode</a>&lt;X, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.CustomValueKind.html\" title=\"trait radix_engine_interface::prelude::prelude::CustomValueKind\">CustomValueKind</a>,\n    E: <a class=\"trait\" href=\"radix_engine_interface/prelude/trait.Encoder.html\" title=\"trait radix_engine_interface::prelude::Encoder\">Encoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/trait.Encode.html#tymethod.encode_value_kind\" class=\"fn\">encode_value_kind</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.Result.html\" title=\"enum radix_engine_interface::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.EncodeError.html\" title=\"enum radix_engine_interface::prelude::prelude::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR value’s kind to the encoder</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_body\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_body\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/trait.Encode.html#tymethod.encode_body\" class=\"fn\">encode_body</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.Result.html\" title=\"enum radix_engine_interface::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.EncodeError.html\" title=\"enum radix_engine_interface::prelude::prelude::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR body of the type to the encoder. <a href=\"radix_engine_interface/trait.Encode.html#tymethod.encode_body\">Read more</a></div></details></div></details>","Encode<X, E>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/basic.rs.html#278\">source</a><a href=\"#impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"radix_engine_interface/prelude/representations/trait.CustomDisplayContext.html\" title=\"trait radix_engine_interface::prelude::representations::CustomDisplayContext\">CustomDisplayContext</a>&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.CustomExtension\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CustomExtension\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radix_engine_interface/prelude/representations/trait.CustomDisplayContext.html#associatedtype.CustomExtension\" class=\"associatedtype\">CustomExtension</a> = <a class=\"enum\" href=\"radix_engine_interface/prelude/enum.NoCustomExtension.html\" title=\"enum radix_engine_interface::prelude::NoCustomExtension\">NoCustomExtension</a></h4></section></div></details>","CustomDisplayContext<'a>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SborTuple%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-SborTuple%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.SborTuple.html\" title=\"trait radix_engine_interface::prelude::prelude::SborTuple\">SborTuple</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.CustomValueKind.html\" title=\"trait radix_engine_interface::prelude::prelude::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.get_length\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.get_length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/prelude/prelude/trait.SborTuple.html#tymethod.get_length\" class=\"fn\">get_length</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a></h4></section></div></details>","SborTuple<X>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Categorize%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-Categorize%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"radix_engine_interface/trait.Categorize.html\" title=\"trait radix_engine_interface::Categorize\">Categorize</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"radix_engine_interface/prelude/prelude/trait.CustomValueKind.html\" title=\"trait radix_engine_interface::prelude::prelude::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_interface/trait.Categorize.html#tymethod.value_kind\" class=\"fn\">value_kind</a>() -&gt; <a class=\"enum\" href=\"radix_engine_interface/prelude/prelude/enum.ValueKind.html\" title=\"enum radix_engine_interface::prelude::prelude::ValueKind\">ValueKind</a>&lt;X&gt;</h4></section></div></details>","Categorize<X>","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonFungibleData-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#8-10\">source</a><a href=\"#impl-NonFungibleData-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_interface/types/traits/trait.NonFungibleData.html\" title=\"trait radix_engine_interface::types::traits::NonFungibleData\">NonFungibleData</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.MUTABLE_FIELDS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#9\">source</a><a href=\"#associatedconstant.MUTABLE_FIELDS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"radix_engine_interface/types/traits/trait.NonFungibleData.html#associatedconstant.MUTABLE_FIELDS\" class=\"constant\">MUTABLE_FIELDS</a>: &amp;'static [&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.str.html\">str</a>] = _</h4></section></div></details>","NonFungibleData","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssignmentSetOwnerOutput","radix_engine_interface::api::node_modules::auth::role_assignment::invocations::RoleAssingmentLockOwnerOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataSetOutput","radix_engine_interface::api::node_modules::metadata::invocations::MetadataLockOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltySetOutput","radix_engine_interface::api::node_modules::royalty::invocations::ComponentRoyaltyLockOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateRecoveryAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerTimedConfirmRecoveryOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerLockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerUnlockPrimaryRoleOutput","radix_engine_interface::blueprints::access_controller::invocations::AccessControllerStopTimedRecoveryOutput","radix_engine_interface::blueprints::account::invocations::AccountLockFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountLockContingentFeeOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositOutput","radix_engine_interface::blueprints::account::invocations::AccountDepositBatchOutput","radix_engine_interface::blueprints::account::invocations::AccountSetDefaultDepositRuleOutput","radix_engine_interface::blueprints::account::invocations::AccountSetResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveResourcePreferenceOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountTryDepositBatchOrAbortOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnOutput","radix_engine_interface::blueprints::account::invocations::AccountBurnNonFungiblesOutput","radix_engine_interface::blueprints::account::invocations::AccountAddAuthorizedDepositorOutput","radix_engine_interface::blueprints::account::invocations::AccountRemoveAuthorizedDepositorOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerCreateOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerStartOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ConsensusManagerNextRoundOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorRegisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUnregisterOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateKeyOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateFeeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorUpdateAcceptDelegatedStakeOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorSignalProtocolUpdateReadinessOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyEmissionOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorApplyRewardOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorLockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::consensus_manager::invocations::ValidatorStartUnlockOwnerStakeUnitsOutput","radix_engine_interface::blueprints::pool::multi_resource_pool::invocations::MultiResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::one_resource_pool::invocations::OneResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::pool::two_resource_pool::invocations::TwoResourcePoolProtectedDepositOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZonePushOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropSignatureProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneDropRegularProofsOutput","radix_engine_interface::blueprints::resource::auth_zone::AuthZoneAssertAccessRuleOutput","radix_engine_interface::blueprints::resource::bucket::BucketPutOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketLockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_bucket::FungibleBucketUnlockAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFeeOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultLockFungibleAmountOutput","radix_engine_interface::blueprints::resource::fungible::fungible_vault::FungibleVaultUnlockFungibleAmountOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_bucket::NonFungibleBucketUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_resource_manager::NonFungibleResourceManagerUpdateDataOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultLockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultUnlockNonFungiblesOutput","radix_engine_interface::blueprints::resource::non_fungible::non_fungible_vault::NonFungibleVaultBurnNonFungiblesOutput","radix_engine_interface::blueprints::resource::proof::ProofDropOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerPackageBurnOutput","radix_engine_interface::blueprints::resource::resource_manager::ResourceManagerDropEmptyBucketOutput","radix_engine_interface::blueprints::resource::vault::VaultPutOutput","radix_engine_interface::blueprints::resource::vault::VaultFreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultUnfreezeOutput","radix_engine_interface::blueprints::resource::vault::VaultBurnOutput","radix_engine_interface::blueprints::resource::worktop::WorktopDropOutput","radix_engine_interface::blueprints::resource::worktop::WorktopPutOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsAmountOutput","radix_engine_interface::blueprints::resource::worktop::WorktopAssertContainsNonFungiblesOutput","radix_engine_interface::blueprints::test_utils::invocations::TestUtilsPanicOutput","radix_engine_interface::hooks::OnVirtualizeOutput","radix_engine_interface::hooks::OnDropOutput","radix_engine_interface::hooks::OnMoveOutput"]],
"radix_engine_queries":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VersionedNonFungibleVaultNonFungibleVersion-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#impl-VersionedNonFungibleVaultNonFungibleVersion-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"radix_engine_queries/typed_substate_layout/trait.VersionedNonFungibleVaultNonFungibleVersion.html\" title=\"trait radix_engine_queries::typed_substate_layout::VersionedNonFungibleVaultNonFungibleVersion\">VersionedNonFungibleVaultNonFungibleVersion</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Versioned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Versioned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"radix_engine_queries/typed_substate_layout/trait.VersionedNonFungibleVaultNonFungibleVersion.html#associatedtype.Versioned\" class=\"associatedtype\">Versioned</a> = <a class=\"enum\" href=\"radix_engine_queries/typed_substate_layout/enum.VersionedNonFungibleVaultNonFungible.html\" title=\"enum radix_engine_queries::typed_substate_layout::VersionedNonFungibleVaultNonFungible\">VersionedNonFungibleVaultNonFungible</a></h4></section><section id=\"method.into_versioned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#method.into_versioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"radix_engine_queries/typed_substate_layout/trait.VersionedNonFungibleVaultNonFungibleVersion.html#tymethod.into_versioned\" class=\"fn\">into_versioned</a>(\n    self\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a> as <a class=\"trait\" href=\"radix_engine_queries/typed_substate_layout/trait.VersionedNonFungibleVaultNonFungibleVersion.html\" title=\"trait radix_engine_queries::typed_substate_layout::VersionedNonFungibleVaultNonFungibleVersion\">VersionedNonFungibleVaultNonFungibleVersion</a>&gt;::<a class=\"associatedtype\" href=\"radix_engine_queries/typed_substate_layout/trait.VersionedNonFungibleVaultNonFungibleVersion.html#associatedtype.Versioned\" title=\"type radix_engine_queries::typed_substate_layout::VersionedNonFungibleVaultNonFungibleVersion::Versioned\">Versioned</a></h4></section></div></details>","VersionedNonFungibleVaultNonFungibleVersion","radix_engine_queries::typed_substate_layout::NonFungibleVaultNonFungible","radix_engine_queries::typed_substate_layout::ComponentRoyaltySetOutput","radix_engine_queries::typed_substate_layout::ComponentRoyaltyLockOutput"],["<section id=\"impl-IntoFunc%3CT,+(),+R%3E-for-F\" class=\"impl\"><a href=\"#impl-IntoFunc%3CT,+(),+R%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F, R&gt; IntoFunc&lt;T, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, R&gt; for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>() -&gt; R + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    R: WasmRet,</div></h3></section>","IntoFunc<T, (), R>","radix_engine_queries::typed_substate_layout::NonFungibleVaultNonFungible","radix_engine_queries::typed_substate_layout::ComponentRoyaltySetOutput","radix_engine_queries::typed_substate_layout::ComponentRoyaltyLockOutput"]],
"scrypto":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1483\">source</a></span><a href=\"#impl-PartialOrd-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.PartialOrd.html\" title=\"trait scrypto::prelude::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1485\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"scrypto/prelude/enum.Option.html\" title=\"enum scrypto::prelude::Option\">Option</a>&lt;<a class=\"enum\" href=\"scrypto/prelude/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum scrypto::prelude::radix_engine_common::prelude::rust::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"scrypto/prelude/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"scrypto/prelude/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"scrypto/prelude/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"scrypto/prelude/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"scrypto/prelude/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<section id=\"impl-ConstParamTy-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#1083\">source</a><a href=\"#impl-ConstParamTy-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/radix_engine_common/prelude/rust/marker/trait.ConstParamTy.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::rust::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","ConstParamTy","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#17\">source</a></span><a href=\"#impl-FromIterator%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.FromIterator.html\" title=\"trait scrypto::prelude::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"docblock\"><p>Collapses all unit items from an iterator into one.</p>\n<p>This is more useful when combined with higher-level abstractions, like\ncollecting to a <code>Result&lt;(), E&gt;</code> where you only care about errors:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span>data = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;()&gt; = data.iter()\n    .map(|x| <span class=\"macro\">writeln!</span>(stdout(), <span class=\"string\">\"{x}\"</span>))\n    .collect();\n<span class=\"macro\">assert!</span>(res.is_ok());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#18\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"scrypto/prelude/trait.IntoIterator.html\" title=\"trait scrypto::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"scrypto/prelude/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<()>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a></span><a href=\"#impl-Hash-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::rust::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, _state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::rust::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::rust::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"scrypto/prelude/trait.Sized.html\" title=\"trait scrypto::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"scrypto/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2527\">source</a></span><a href=\"#impl-Debug-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.Debug.html\" title=\"trait scrypto::prelude::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2529\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"scrypto/prelude/radix_engine_common/prelude/fmt/struct.Formatter.html\" title=\"struct scrypto::prelude::radix_engine_common::prelude::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"scrypto/prelude/enum.Result.html\" title=\"enum scrypto::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"scrypto/prelude/radix_engine_common/prelude/fmt/struct.Error.html\" title=\"struct scrypto::prelude::radix_engine_common::prelude::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"scrypto/prelude/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<section id=\"impl-StructuralPartialEq-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/radix_engine_common/prelude/rust/marker/trait.StructuralPartialEq.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::rust::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","StructuralPartialEq","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<section id=\"impl-Eq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1455\">source</a></span><a href=\"#impl-Eq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.Eq.html\" title=\"trait scrypto::prelude::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","Eq","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1533\">source</a></span><a href=\"#impl-Ord-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.Ord.html\" title=\"trait scrypto::prelude::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"scrypto/prelude/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum scrypto::prelude::radix_engine_common::prelude::rust::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"scrypto/prelude/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum scrypto::prelude::radix_engine_common::prelude::rust::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"scrypto/prelude/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"scrypto/prelude/trait.Sized.html\" title=\"trait scrypto::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"scrypto/prelude/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"scrypto/prelude/trait.Sized.html\" title=\"trait scrypto::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"scrypto/prelude/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"scrypto/prelude/trait.Sized.html\" title=\"trait scrypto::prelude::Sized\">Sized</a> + <a class=\"trait\" href=\"scrypto/prelude/trait.PartialOrd.html\" title=\"trait scrypto::prelude::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"scrypto/prelude/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1433\">source</a></span><a href=\"#impl-PartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.PartialEq.html\" title=\"trait scrypto::prelude::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1435\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1439\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#390\">source</a></span><a href=\"#impl-Extend%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.Extend.html\" title=\"trait scrypto::prelude::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#391\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"scrypto/prelude/trait.IntoIterator.html\" title=\"trait scrypto::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"scrypto/prelude/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#394\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _item: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"scrypto/prelude/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<()>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a></span><a href=\"#impl-Default-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/prelude/trait.Default.html\" title=\"trait scrypto::prelude::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Default.html#tymethod.default\" class=\"fn\">default</a>()</h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>()</code></p>\n</div></details></div></details>","Default","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonFungibleData-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#8\">source</a><a href=\"#impl-NonFungibleData-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto/types/trait.NonFungibleData.html\" title=\"trait scrypto::types::NonFungibleData\">NonFungibleData</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.MUTABLE_FIELDS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#9\">source</a><a href=\"#associatedconstant.MUTABLE_FIELDS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"scrypto/types/trait.NonFungibleData.html#associatedconstant.MUTABLE_FIELDS\" class=\"constant\">MUTABLE_FIELDS</a>: &amp;'static [&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.str.html\">str</a>] = _</h4></section></div></details>","NonFungibleData","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3CX,+D%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#impl-Decode%3CX,+D%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, D&gt; <a class=\"trait\" href=\"scrypto/prelude/trait.Decode.html\" title=\"trait scrypto::prelude::Decode\">Decode</a>&lt;X, D&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto/prelude/trait.CustomValueKind.html\" title=\"trait scrypto::prelude::CustomValueKind\">CustomValueKind</a>,\n    D: <a class=\"trait\" href=\"scrypto/prelude/trait.Decoder.html\" title=\"trait scrypto::prelude::Decoder\">Decoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_body_with_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#method.decode_body_with_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Decode.html#tymethod.decode_body_with_value_kind\" class=\"fn\">decode_body_with_value_kind</a>(\n    decoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut D</a>,\n    value_kind: <a class=\"enum\" href=\"scrypto/prelude/enum.ValueKind.html\" title=\"enum scrypto::prelude::ValueKind\">ValueKind</a>&lt;X&gt;\n) -&gt; <a class=\"enum\" href=\"scrypto/prelude/enum.Result.html\" title=\"enum scrypto::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scrypto/prelude/enum.DecodeError.html\" title=\"enum scrypto::prelude::DecodeError\">DecodeError</a>&gt;</h4></section></summary><div class='docblock'>Decodes the type from the decoder, which should match a preloaded value kind. <a href=\"scrypto/prelude/trait.Decode.html#tymethod.decode_body_with_value_kind\">Read more</a></div></details></div></details>","Decode<X, D>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Describe%3CC%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#impl-Describe%3CC%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C&gt; <a class=\"trait\" href=\"scrypto/prelude/trait.Describe.html\" title=\"trait scrypto::prelude::Describe\">Describe</a>&lt;C&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    C: <a class=\"trait\" href=\"scrypto/prelude/trait.CustomTypeKind.html\" title=\"trait scrypto::prelude::CustomTypeKind\">CustomTypeKind</a>&lt;<a class=\"enum\" href=\"scrypto/prelude/enum.RustTypeId.html\" title=\"enum scrypto::prelude::RustTypeId\">RustTypeId</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TYPE_ID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#associatedconstant.TYPE_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"scrypto/prelude/trait.Describe.html#associatedconstant.TYPE_ID\" class=\"constant\">TYPE_ID</a>: <a class=\"enum\" href=\"scrypto/prelude/enum.RustTypeId.html\" title=\"enum scrypto::prelude::RustTypeId\">RustTypeId</a> = _</h4></section></summary><div class='docblock'>The <code>TYPE_ID</code> should give a unique identifier for its SBOR schema type.\nAn SBOR schema type capture details about the SBOR payload, how it should be interpreted, validated and displayed. <a href=\"scrypto/prelude/trait.Describe.html#associatedconstant.TYPE_ID\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_data\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#method.type_data\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Describe.html#tymethod.type_data\" class=\"fn\">type_data</a>() -&gt; <a class=\"struct\" href=\"scrypto/prelude/struct.TypeData.html\" title=\"struct scrypto::prelude::TypeData\">TypeData</a>&lt;C, <a class=\"enum\" href=\"scrypto/prelude/enum.RustTypeId.html\" title=\"enum scrypto::prelude::RustTypeId\">RustTypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the local schema for the given type. <a href=\"scrypto/prelude/trait.Describe.html#tymethod.type_data\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_all_dependencies\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/schema/describe.rs.html#59\">source</a><a href=\"#method.add_all_dependencies\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Describe.html#method.add_all_dependencies\" class=\"fn\">add_all_dependencies</a>(aggregator: &amp;mut <a class=\"struct\" href=\"scrypto/prelude/struct.TypeAggregator.html\" title=\"struct scrypto::prelude::TypeAggregator\">TypeAggregator</a>&lt;C&gt;)</h4></section></summary><div class='docblock'>For each type referenced in <code>get_local_type_data</code>, we need to ensure that the type and all of its own references\nget added to the aggregator. <a href=\"scrypto/prelude/trait.Describe.html#method.add_all_dependencies\">Read more</a></div></details></div></details>","Describe<C>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3CX,+E%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#impl-Encode%3CX,+E%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, E&gt; <a class=\"trait\" href=\"scrypto/prelude/trait.Encode.html\" title=\"trait scrypto::prelude::Encode\">Encode</a>&lt;X, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto/prelude/trait.CustomValueKind.html\" title=\"trait scrypto::prelude::CustomValueKind\">CustomValueKind</a>,\n    E: <a class=\"trait\" href=\"scrypto/prelude/trait.Encoder.html\" title=\"trait scrypto::prelude::Encoder\">Encoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Encode.html#tymethod.encode_value_kind\" class=\"fn\">encode_value_kind</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"scrypto/prelude/enum.Result.html\" title=\"enum scrypto::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scrypto/prelude/enum.EncodeError.html\" title=\"enum scrypto::prelude::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR value’s kind to the encoder</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_body\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_body\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Encode.html#tymethod.encode_body\" class=\"fn\">encode_body</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"scrypto/prelude/enum.Result.html\" title=\"enum scrypto::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scrypto/prelude/enum.EncodeError.html\" title=\"enum scrypto::prelude::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR body of the type to the encoder. <a href=\"scrypto/prelude/trait.Encode.html#tymethod.encode_body\">Read more</a></div></details></div></details>","Encode<X, E>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/basic.rs.html#278\">source</a><a href=\"#impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"scrypto/prelude/radix_engine_common/prelude/representations/trait.CustomDisplayContext.html\" title=\"trait scrypto::prelude::radix_engine_common::prelude::representations::CustomDisplayContext\">CustomDisplayContext</a>&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.CustomExtension\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CustomExtension\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"scrypto/prelude/radix_engine_common/prelude/representations/trait.CustomDisplayContext.html#associatedtype.CustomExtension\" class=\"associatedtype\">CustomExtension</a> = <a class=\"enum\" href=\"scrypto/prelude/enum.NoCustomExtension.html\" title=\"enum scrypto::prelude::NoCustomExtension\">NoCustomExtension</a></h4></section></div></details>","CustomDisplayContext<'a>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SborTuple%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-SborTuple%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"scrypto/prelude/trait.SborTuple.html\" title=\"trait scrypto::prelude::SborTuple\">SborTuple</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto/prelude/trait.CustomValueKind.html\" title=\"trait scrypto::prelude::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.get_length\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.get_length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.SborTuple.html#tymethod.get_length\" class=\"fn\">get_length</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a></h4></section></div></details>","SborTuple<X>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Categorize%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-Categorize%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"scrypto/prelude/trait.Categorize.html\" title=\"trait scrypto::prelude::Categorize\">Categorize</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto/prelude/trait.CustomValueKind.html\" title=\"trait scrypto::prelude::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto/prelude/trait.Categorize.html#tymethod.value_kind\" class=\"fn\">value_kind</a>() -&gt; <a class=\"enum\" href=\"scrypto/prelude/enum.ValueKind.html\" title=\"enum scrypto::prelude::ValueKind\">ValueKind</a>&lt;X&gt;</h4></section></div></details>","Categorize<X>","scrypto::api::node_modules::auth::RoleAssignmentSetOutput","scrypto::api::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto::api::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto::api::node_modules::metadata::MetadataSetOutput","scrypto::api::node_modules::metadata::MetadataLockOutput","scrypto::api::node_modules::royalty::ComponentRoyaltySetOutput","scrypto::api::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto::blueprints::resource::AuthZonePushOutput","scrypto::blueprints::resource::AuthZoneDropProofsOutput","scrypto::blueprints::resource::AuthZoneDropSignatureProofsOutput","scrypto::blueprints::resource::AuthZoneDropRegularProofsOutput","scrypto::blueprints::resource::AuthZoneAssertAccessRuleOutput","scrypto::blueprints::resource::BucketPutOutput","scrypto::blueprints::resource::FungibleBucketLockAmountOutput","scrypto::blueprints::resource::FungibleBucketUnlockAmountOutput","scrypto::blueprints::resource::FungibleVaultLockFeeOutput","scrypto::blueprints::resource::FungibleVaultLockFungibleAmountOutput","scrypto::blueprints::resource::FungibleVaultUnlockFungibleAmountOutput","scrypto::blueprints::resource::NonFungibleBucketLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleBucketUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleResourceManagerUpdateDataOutput","scrypto::blueprints::resource::NonFungibleVaultLockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultUnlockNonFungiblesOutput","scrypto::blueprints::resource::NonFungibleVaultBurnNonFungiblesOutput","scrypto::blueprints::resource::ProofDropOutput","scrypto::blueprints::resource::ResourceManagerBurnOutput","scrypto::blueprints::resource::ResourceManagerPackageBurnOutput","scrypto::blueprints::resource::ResourceManagerDropEmptyBucketOutput","scrypto::blueprints::resource::VaultPutOutput","scrypto::blueprints::resource::VaultFreezeOutput","scrypto::blueprints::resource::VaultUnfreezeOutput","scrypto::blueprints::resource::VaultBurnOutput","scrypto::blueprints::resource::WorktopDropOutput","scrypto::blueprints::resource::WorktopPutOutput","scrypto::blueprints::resource::WorktopAssertContainsOutput","scrypto::blueprints::resource::WorktopAssertContainsAmountOutput","scrypto::blueprints::resource::WorktopAssertContainsNonFungiblesOutput","scrypto::resource::resource_builder::private::NoNonFungibleDataSchema","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto::blueprints::access_controller::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerTimedConfirmRecoveryOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto::blueprints::access_controller::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto::blueprints::access_controller::AccessControllerLockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerUnlockPrimaryRoleOutput","scrypto::blueprints::access_controller::AccessControllerStopTimedRecoveryOutput","scrypto::blueprints::account::AccountLockFeeOutput","scrypto::blueprints::account::AccountLockContingentFeeOutput","scrypto::blueprints::account::AccountDepositOutput","scrypto::blueprints::account::AccountDepositBatchOutput","scrypto::blueprints::account::AccountSetDefaultDepositRuleOutput","scrypto::blueprints::account::AccountSetResourcePreferenceOutput","scrypto::blueprints::account::AccountRemoveResourcePreferenceOutput","scrypto::blueprints::account::AccountTryDepositOrAbortOutput","scrypto::blueprints::account::AccountTryDepositBatchOrAbortOutput","scrypto::blueprints::account::AccountBurnOutput","scrypto::blueprints::account::AccountBurnNonFungiblesOutput","scrypto::blueprints::account::AccountAddAuthorizedDepositorOutput","scrypto::blueprints::account::AccountRemoveAuthorizedDepositorOutput","scrypto::blueprints::consensus_manager::ConsensusManagerCreateOutput","scrypto::blueprints::consensus_manager::ConsensusManagerStartOutput","scrypto::blueprints::consensus_manager::ConsensusManagerNextRoundOutput","scrypto::blueprints::consensus_manager::ValidatorRegisterOutput","scrypto::blueprints::consensus_manager::ValidatorUnregisterOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateKeyOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateFeeOutput","scrypto::blueprints::consensus_manager::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto::blueprints::consensus_manager::ValidatorSignalProtocolUpdateReadinessOutput","scrypto::blueprints::consensus_manager::ValidatorApplyEmissionOutput","scrypto::blueprints::consensus_manager::ValidatorApplyRewardOutput","scrypto::blueprints::consensus_manager::ValidatorLockOwnerStakeUnitsOutput","scrypto::blueprints::consensus_manager::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto::blueprints::pool::MultiResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::OneResourcePoolProtectedDepositOutput","scrypto::blueprints::pool::TwoResourcePoolProtectedDepositOutput","scrypto::blueprints::test_utils::invocations::TestUtilsPanicOutput"]],
"scrypto_test":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1483\">source</a></span><a href=\"#impl-PartialOrd-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1485\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.Option.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::Option\">Option</a>&lt;<a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::rust::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<section id=\"impl-ConstParamTy-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#1083\">source</a><a href=\"#impl-ConstParamTy-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/marker/trait.ConstParamTy.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::rust::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","ConstParamTy","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#17\">source</a></span><a href=\"#impl-FromIterator%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.FromIterator.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"docblock\"><p>Collapses all unit items from an iterator into one.</p>\n<p>This is more useful when combined with higher-level abstractions, like\ncollecting to a <code>Result&lt;(), E&gt;</code> where you only care about errors:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">let </span>data = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>res: <span class=\"prelude-ty\">Result</span>&lt;()&gt; = data.iter()\n    .map(|x| <span class=\"macro\">writeln!</span>(stdout(), <span class=\"string\">\"{x}\"</span>))\n    .collect();\n<span class=\"macro\">assert!</span>(res.is_ok());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/unit.rs.html#18\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.IntoIterator.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<()>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a></span><a href=\"#impl-Hash-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::rust::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#914\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, _state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::rust::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::rust::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Sized.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hasher.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::rust::hash::Hasher\"><code>Hasher</code></a>. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2527\">source</a></span><a href=\"#impl-Debug-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Debug.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/fmt/mod.rs.html#2529\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"scrypto_test/prelude/radix_engine_common/prelude/fmt/struct.Formatter.html\" title=\"struct scrypto_test::prelude::radix_engine_common::prelude::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.Result.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"scrypto_test/prelude/radix_engine_common/prelude/fmt/struct.Error.html\" title=\"struct scrypto_test::prelude::radix_engine_common::prelude::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<section id=\"impl-StructuralPartialEq-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/marker/trait.StructuralPartialEq.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::rust::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","StructuralPartialEq","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<section id=\"impl-Eq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1455\">source</a></span><a href=\"#impl-Eq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Eq.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section>","Eq","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1533\">source</a></span><a href=\"#impl-Ord-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1535\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::rust::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"scrypto_test/prelude/radix_engine_common/prelude/rust/cmp/enum.Ordering.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::rust::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Sized.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Sized.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Sized.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Sized\">Sized</a> + <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialOrd.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1433\">source</a></span><a href=\"#impl-PartialEq-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialEq.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1435\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/cmp.rs.html#1439\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, _other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C()%3E-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#390\">source</a></span><a href=\"#impl-Extend%3C()%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Extend.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#391\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.IntoIterator.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#394\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _item: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<()>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a></span><a href=\"#impl-Default-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Default.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.77.1/src/core/default.rs.html#158\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.Default.html#tymethod.default\" class=\"fn\">default</a>()</h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>()</code></p>\n</div></details></div></details>","Default","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexEntryContentSource%3CNonFungibleVaultNonFungibleEntryPayload%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#impl-IndexEntryContentSource%3CNonFungibleVaultNonFungibleEntryPayload%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/trait.IndexEntryContentSource.html\" title=\"trait scrypto_test::prelude::IndexEntryContentSource\">IndexEntryContentSource</a>&lt;<a class=\"struct\" href=\"scrypto_test/prelude/struct.NonFungibleVaultNonFungibleEntryPayload.html\" title=\"struct scrypto_test::prelude::NonFungibleVaultNonFungibleEntryPayload\">NonFungibleVaultNonFungibleEntryPayload</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.into_content\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#method.into_content\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.IndexEntryContentSource.html#tymethod.into_content\" class=\"fn\">into_content</a>(self) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/enum.VersionedNonFungibleVaultNonFungible.html\" title=\"enum scrypto_test::prelude::VersionedNonFungibleVaultNonFungible\">VersionedNonFungibleVaultNonFungible</a></h4></section><section id=\"method.into_payload\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/models/payloads.rs.html#209\">source</a><a href=\"#method.into_payload\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.IndexEntryContentSource.html#method.into_payload\" class=\"fn\">into_payload</a>(self) -&gt; Payload</h4></section><section id=\"method.into_substate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/models/payloads.rs.html#213\">source</a><a href=\"#method.into_substate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.IndexEntryContentSource.html#method.into_substate\" class=\"fn\">into_substate</a>(self) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/enum.IndexEntrySubstate.html\" title=\"enum scrypto_test::prelude::IndexEntrySubstate\">IndexEntrySubstate</a>&lt;Payload&gt;</h4></section></div></details>","IndexEntryContentSource<NonFungibleVaultNonFungibleEntryPayload>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KeyValueEntryContentSource%3CAccountAuthorizedDepositorEntryPayload%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/account/blueprint.rs.html#64-113\">source</a><a href=\"#impl-KeyValueEntryContentSource%3CAccountAuthorizedDepositorEntryPayload%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/trait.KeyValueEntryContentSource.html\" title=\"trait scrypto_test::prelude::KeyValueEntryContentSource\">KeyValueEntryContentSource</a>&lt;<a class=\"struct\" href=\"radix_engine/blueprints/account/blueprint/account_models/struct.AccountAuthorizedDepositorEntryPayload.html\" title=\"struct radix_engine::blueprints::account::blueprint::account_models::AccountAuthorizedDepositorEntryPayload\">AccountAuthorizedDepositorEntryPayload</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.into_content\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/account/blueprint.rs.html#64-113\">source</a><a href=\"#method.into_content\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.KeyValueEntryContentSource.html#tymethod.into_content\" class=\"fn\">into_content</a>(self) -&gt; <a class=\"enum\" href=\"radix_engine/blueprints/account/blueprint/account_models/enum.VersionedAccountAuthorizedDepositor.html\" title=\"enum radix_engine::blueprints::account::blueprint::account_models::VersionedAccountAuthorizedDepositor\">VersionedAccountAuthorizedDepositor</a></h4></section><section id=\"method.into_payload\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/models/payloads.rs.html#164\">source</a><a href=\"#method.into_payload\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.KeyValueEntryContentSource.html#method.into_payload\" class=\"fn\">into_payload</a>(self) -&gt; Payload</h4></section><section id=\"method.into_locked_substate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/models/payloads.rs.html#168\">source</a><a href=\"#method.into_locked_substate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.KeyValueEntryContentSource.html#method.into_locked_substate\" class=\"fn\">into_locked_substate</a>(self) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/enum.KeyValueEntrySubstate.html\" title=\"enum scrypto_test::prelude::KeyValueEntrySubstate\">KeyValueEntrySubstate</a>&lt;Payload&gt;</h4></section><section id=\"method.into_unlocked_substate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/models/payloads.rs.html#172\">source</a><a href=\"#method.into_unlocked_substate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.KeyValueEntryContentSource.html#method.into_unlocked_substate\" class=\"fn\">into_unlocked_substate</a>(self) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/enum.KeyValueEntrySubstate.html\" title=\"enum scrypto_test::prelude::KeyValueEntrySubstate\">KeyValueEntrySubstate</a>&lt;Payload&gt;</h4></section></div></details>","KeyValueEntryContentSource<AccountAuthorizedDepositorEntryPayload>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VersionedNonFungibleVaultNonFungibleVersion-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#impl-VersionedNonFungibleVaultNonFungibleVersion-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/trait.VersionedNonFungibleVaultNonFungibleVersion.html\" title=\"trait scrypto_test::prelude::VersionedNonFungibleVaultNonFungibleVersion\">VersionedNonFungibleVaultNonFungibleVersion</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Versioned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Versioned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"scrypto_test/prelude/trait.VersionedNonFungibleVaultNonFungibleVersion.html#associatedtype.Versioned\" class=\"associatedtype\">Versioned</a> = <a class=\"enum\" href=\"scrypto_test/prelude/enum.VersionedNonFungibleVaultNonFungible.html\" title=\"enum scrypto_test::prelude::VersionedNonFungibleVaultNonFungible\">VersionedNonFungibleVaultNonFungible</a></h4></section><section id=\"method.into_versioned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine/blueprints/resource/non_fungible/non_fungible_vault.rs.html#21-61\">source</a><a href=\"#method.into_versioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.VersionedNonFungibleVaultNonFungibleVersion.html#tymethod.into_versioned\" class=\"fn\">into_versioned</a>(\n    self\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a> as <a class=\"trait\" href=\"scrypto_test/prelude/trait.VersionedNonFungibleVaultNonFungibleVersion.html\" title=\"trait scrypto_test::prelude::VersionedNonFungibleVaultNonFungibleVersion\">VersionedNonFungibleVaultNonFungibleVersion</a>&gt;::<a class=\"associatedtype\" href=\"scrypto_test/prelude/trait.VersionedNonFungibleVaultNonFungibleVersion.html#associatedtype.Versioned\" title=\"type scrypto_test::prelude::VersionedNonFungibleVaultNonFungibleVersion::Versioned\">Versioned</a></h4></section></div></details>","VersionedNonFungibleVaultNonFungibleVersion","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonFungibleData-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#8\">source</a><a href=\"#impl-NonFungibleData-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/trait.NonFungibleData.html\" title=\"trait scrypto_test::prelude::NonFungibleData\">NonFungibleData</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.MUTABLE_FIELDS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/radix_engine_interface/types/traits.rs.html#9\">source</a><a href=\"#associatedconstant.MUTABLE_FIELDS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"scrypto_test/prelude/trait.NonFungibleData.html#associatedconstant.MUTABLE_FIELDS\" class=\"constant\">MUTABLE_FIELDS</a>: &amp;'static [&amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.str.html\">str</a>] = _</h4></section></div></details>","NonFungibleData","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decode%3CX,+D%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#impl-Decode%3CX,+D%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, D&gt; <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/trait.Decode.html\" title=\"trait scrypto_test::prelude::radix_engine_common::Decode\">Decode</a>&lt;X, D&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.CustomValueKind.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::CustomValueKind\">CustomValueKind</a>,\n    D: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Decoder.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::Decoder\">Decoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_body_with_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#97\">source</a><a href=\"#method.decode_body_with_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/trait.Decode.html#tymethod.decode_body_with_value_kind\" class=\"fn\">decode_body_with_value_kind</a>(\n    decoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut D</a>,\n    value_kind: <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.ValueKind.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::ValueKind\">ValueKind</a>&lt;X&gt;\n) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.Result.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.DecodeError.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::DecodeError\">DecodeError</a>&gt;</h4></section></summary><div class='docblock'>Decodes the type from the decoder, which should match a preloaded value kind. <a href=\"scrypto_test/prelude/radix_engine_common/trait.Decode.html#tymethod.decode_body_with_value_kind\">Read more</a></div></details></div></details>","Decode<X, D>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Describe%3CC%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#impl-Describe%3CC%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C&gt; <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Describe.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::Describe\">Describe</a>&lt;C&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    C: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.CustomTypeKind.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::CustomTypeKind\">CustomTypeKind</a>&lt;<a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.RustTypeId.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::RustTypeId\">RustTypeId</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TYPE_ID\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#associatedconstant.TYPE_ID\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Describe.html#associatedconstant.TYPE_ID\" class=\"constant\">TYPE_ID</a>: <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.RustTypeId.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::RustTypeId\">RustTypeId</a> = _</h4></section></summary><div class='docblock'>The <code>TYPE_ID</code> should give a unique identifier for its SBOR schema type.\nAn SBOR schema type capture details about the SBOR payload, how it should be interpreted, validated and displayed. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Describe.html#associatedconstant.TYPE_ID\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_data\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#144\">source</a><a href=\"#method.type_data\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Describe.html#tymethod.type_data\" class=\"fn\">type_data</a>() -&gt; <a class=\"struct\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/struct.TypeData.html\" title=\"struct scrypto_test::prelude::radix_engine_common::prelude::prelude::TypeData\">TypeData</a>&lt;C, <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.RustTypeId.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::RustTypeId\">RustTypeId</a>&gt;</h4></section></summary><div class='docblock'>Returns the local schema for the given type. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Describe.html#tymethod.type_data\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_all_dependencies\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/schema/describe.rs.html#59\">source</a><a href=\"#method.add_all_dependencies\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Describe.html#method.add_all_dependencies\" class=\"fn\">add_all_dependencies</a>(aggregator: &amp;mut <a class=\"struct\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/struct.TypeAggregator.html\" title=\"struct scrypto_test::prelude::radix_engine_common::prelude::prelude::TypeAggregator\">TypeAggregator</a>&lt;C&gt;)</h4></section></summary><div class='docblock'>For each type referenced in <code>get_local_type_data</code>, we need to ensure that the type and all of its own references\nget added to the aggregator. <a href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Describe.html#method.add_all_dependencies\">Read more</a></div></details></div></details>","Describe<C>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encode%3CX,+E%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#impl-Encode%3CX,+E%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X, E&gt; <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/trait.Encode.html\" title=\"trait scrypto_test::prelude::radix_engine_common::Encode\">Encode</a>&lt;X, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.CustomValueKind.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::CustomValueKind\">CustomValueKind</a>,\n    E: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/trait.Encoder.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::Encoder\">Encoder</a>&lt;X&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/trait.Encode.html#tymethod.encode_value_kind\" class=\"fn\">encode_value_kind</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.Result.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.EncodeError.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR value’s kind to the encoder</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_body\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#61\">source</a><a href=\"#method.encode_body\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/trait.Encode.html#tymethod.encode_body\" class=\"fn\">encode_body</a>(&amp;self, encoder: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.Result.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.EncodeError.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::EncodeError\">EncodeError</a>&gt;</h4></section></summary><div class='docblock'>Encodes the SBOR body of the type to the encoder. <a href=\"scrypto_test/prelude/radix_engine_common/trait.Encode.html#tymethod.encode_body\">Read more</a></div></details></div></details>","Encode<X, E>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/basic.rs.html#278\">source</a><a href=\"#impl-CustomDisplayContext%3C'a%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/representations/trait.CustomDisplayContext.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::representations::CustomDisplayContext\">CustomDisplayContext</a>&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.CustomExtension\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CustomExtension\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"scrypto_test/prelude/radix_engine_common/prelude/representations/trait.CustomDisplayContext.html#associatedtype.CustomExtension\" class=\"associatedtype\">CustomExtension</a> = <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/enum.NoCustomExtension.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::NoCustomExtension\">NoCustomExtension</a></h4></section></div></details>","CustomDisplayContext<'a>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SborTuple%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-SborTuple%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.SborTuple.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::SborTuple\">SborTuple</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.CustomValueKind.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.get_length\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.get_length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.SborTuple.html#tymethod.get_length\" class=\"fn\">get_length</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a></h4></section></div></details>","SborTuple<X>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Categorize%3CX%3E-for-()\" class=\"impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#impl-Categorize%3CX%3E-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;X&gt; <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/trait.Categorize.html\" title=\"trait scrypto_test::prelude::radix_engine_common::Categorize\">Categorize</a>&lt;X&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a><div class=\"where\">where\n    X: <a class=\"trait\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/trait.CustomValueKind.html\" title=\"trait scrypto_test::prelude::radix_engine_common::prelude::prelude::CustomValueKind\">CustomValueKind</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.value_kind\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sbor/codec/tuple.rs.html#21\">source</a><a href=\"#method.value_kind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/radix_engine_common/trait.Categorize.html#tymethod.value_kind\" class=\"fn\">value_kind</a>() -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.ValueKind.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::ValueKind\">ValueKind</a>&lt;X&gt;</h4></section></div></details>","Categorize<X>","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TuplePreparable-for-()\" class=\"impl\"><a href=\"#impl-TuplePreparable-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/trait.TuplePreparable.html\" title=\"trait scrypto_test::prelude::TuplePreparable\">TuplePreparable</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.prepare_into_concatenated_digest\" class=\"method trait-impl\"><a href=\"#method.prepare_into_concatenated_digest\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.TuplePreparable.html#tymethod.prepare_into_concatenated_digest\" class=\"fn\">prepare_into_concatenated_digest</a>(\n    decoder: &amp;mut <a class=\"struct\" href=\"scrypto_test/prelude/struct.TransactionDecoder.html\" title=\"struct scrypto_test::prelude::TransactionDecoder\">TransactionDecoder</a>&lt;'_&gt;,\n    accumulator: <a class=\"struct\" href=\"scrypto_test/prelude/radix_engine_common/prelude/struct.HashAccumulator.html\" title=\"struct scrypto_test::prelude::radix_engine_common::prelude::HashAccumulator\">HashAccumulator</a>\n) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.Result.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"scrypto_test/prelude/struct.Summary.html\" title=\"struct scrypto_test::prelude::Summary\">Summary</a>), PrepareError&gt;</h4></section></div></details>","TuplePreparable","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EnumPreparable-for-()\" class=\"impl\"><a href=\"#impl-EnumPreparable-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"scrypto_test/prelude/trait.EnumPreparable.html\" title=\"trait scrypto_test::prelude::EnumPreparable\">EnumPreparable</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.prepare_into_concatenated_digest\" class=\"method trait-impl\"><a href=\"#method.prepare_into_concatenated_digest\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"scrypto_test/prelude/trait.EnumPreparable.html#tymethod.prepare_into_concatenated_digest\" class=\"fn\">prepare_into_concatenated_digest</a>(\n    decoder: &amp;mut <a class=\"struct\" href=\"scrypto_test/prelude/struct.TransactionDecoder.html\" title=\"struct scrypto_test::prelude::TransactionDecoder\">TransactionDecoder</a>&lt;'_&gt;,\n    accumulator: <a class=\"struct\" href=\"scrypto_test/prelude/radix_engine_common/prelude/struct.HashAccumulator.html\" title=\"struct scrypto_test::prelude::radix_engine_common::prelude::HashAccumulator\">HashAccumulator</a>,\n    expected_discriminator: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"enum\" href=\"scrypto_test/prelude/radix_engine_common/prelude/prelude/enum.Result.html\" title=\"enum scrypto_test::prelude::radix_engine_common::prelude::prelude::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"scrypto_test/prelude/struct.Summary.html\" title=\"struct scrypto_test::prelude::Summary\">Summary</a>), PrepareError&gt;</h4></section></div></details>","EnumPreparable","scrypto_test::prelude::NonFungibleVaultNonFungible","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOutput","scrypto_test::prelude::node_modules::auth::RoleAssignmentSetOwnerOutput","scrypto_test::prelude::node_modules::auth::RoleAssingmentLockOwnerOutput","scrypto_test::prelude::MetadataSetOutput","scrypto_test::prelude::MetadataLockOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltySetOutput","scrypto_test::prelude::node_modules::royalty::ComponentRoyaltyLockOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateRecoveryAsRecoveryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsPrimaryOutput","scrypto_test::prelude::AccessControllerInitiateBadgeWithdrawAttemptAsRecoveryOutput","scrypto_test::prelude::AccessControllerQuickConfirmPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerQuickConfirmRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerTimedConfirmRecoveryOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleRecoveryProposalOutput","scrypto_test::prelude::AccessControllerCancelPrimaryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerCancelRecoveryRoleBadgeWithdrawAttemptOutput","scrypto_test::prelude::AccessControllerLockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerUnlockPrimaryRoleOutput","scrypto_test::prelude::AccessControllerStopTimedRecoveryOutput","scrypto_test::prelude::AccountLockFeeOutput","scrypto_test::prelude::AccountLockContingentFeeOutput","scrypto_test::prelude::AccountDepositOutput","scrypto_test::prelude::AccountDepositBatchOutput","scrypto_test::prelude::AccountSetDefaultDepositRuleOutput","scrypto_test::prelude::AccountSetResourcePreferenceOutput","scrypto_test::prelude::AccountRemoveResourcePreferenceOutput","scrypto_test::prelude::AccountTryDepositOrAbortOutput","scrypto_test::prelude::AccountTryDepositBatchOrAbortOutput","scrypto_test::prelude::AccountBurnOutput","scrypto_test::prelude::AccountBurnNonFungiblesOutput","scrypto_test::prelude::AccountAddAuthorizedDepositorOutput","scrypto_test::prelude::AccountRemoveAuthorizedDepositorOutput","scrypto_test::prelude::ConsensusManagerCreateOutput","scrypto_test::prelude::ConsensusManagerStartOutput","scrypto_test::prelude::ConsensusManagerNextRoundOutput","scrypto_test::prelude::ValidatorRegisterOutput","scrypto_test::prelude::ValidatorUnregisterOutput","scrypto_test::prelude::ValidatorUpdateKeyOutput","scrypto_test::prelude::ValidatorUpdateFeeOutput","scrypto_test::prelude::ValidatorUpdateAcceptDelegatedStakeOutput","scrypto_test::prelude::ValidatorSignalProtocolUpdateReadinessOutput","scrypto_test::prelude::ValidatorApplyEmissionOutput","scrypto_test::prelude::ValidatorApplyRewardOutput","scrypto_test::prelude::ValidatorLockOwnerStakeUnitsOutput","scrypto_test::prelude::ValidatorStartUnlockOwnerStakeUnitsOutput","scrypto_test::prelude::MultiResourcePoolProtectedDepositOutput","scrypto_test::prelude::OneResourcePoolProtectedDepositOutput","scrypto_test::prelude::TwoResourcePoolProtectedDepositOutput","scrypto_test::prelude::AuthZonePushOutput","scrypto_test::prelude::AuthZoneDropProofsOutput","scrypto_test::prelude::AuthZoneDropSignatureProofsOutput","scrypto_test::prelude::AuthZoneDropRegularProofsOutput","scrypto_test::prelude::AuthZoneAssertAccessRuleOutput","scrypto_test::prelude::BucketPutOutput","scrypto_test::prelude::FungibleBucketLockAmountOutput","scrypto_test::prelude::FungibleBucketUnlockAmountOutput","scrypto_test::prelude::FungibleVaultLockFeeOutput","scrypto_test::prelude::FungibleVaultLockFungibleAmountOutput","scrypto_test::prelude::FungibleVaultUnlockFungibleAmountOutput","scrypto_test::prelude::NonFungibleBucketLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleBucketUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleResourceManagerUpdateDataOutput","scrypto_test::prelude::NonFungibleVaultLockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultUnlockNonFungiblesOutput","scrypto_test::prelude::NonFungibleVaultBurnNonFungiblesOutput","scrypto_test::prelude::ProofDropOutput","scrypto_test::prelude::ResourceManagerBurnOutput","scrypto_test::prelude::ResourceManagerPackageBurnOutput","scrypto_test::prelude::ResourceManagerDropEmptyBucketOutput","scrypto_test::prelude::VaultPutOutput","scrypto_test::prelude::VaultFreezeOutput","scrypto_test::prelude::VaultUnfreezeOutput","scrypto_test::prelude::VaultBurnOutput","scrypto_test::prelude::WorktopDropOutput","scrypto_test::prelude::WorktopPutOutput","scrypto_test::prelude::WorktopAssertContainsOutput","scrypto_test::prelude::WorktopAssertContainsAmountOutput","scrypto_test::prelude::WorktopAssertContainsNonFungiblesOutput"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()